{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import warnings\n",
    "\n",
    "os.chdir(\"../..\")\n",
    "sys.path.append(\"../../\")\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Benchmarking methods for identification of DE genes between discrete cell types\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this example, we will demonstrate how to use scDesign3Py to generate negative control and benchmark methods for identifying differentially expressed (DE) genes between discrete cell types. Please note that here we only did a very brief benchmarking for illustration purpose, not for formal comparison.\n",
    "\n",
    "## Import packages and Read in data\n",
    "\n",
    "### import pacakges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R project used is located at /home/ld/mambaforge/envs/cell2loc/lib/R\n"
     ]
    }
   ],
   "source": [
    "import anndata as ad\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scanpy as sc\n",
    "import scDesign3Py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in data\n",
    "\n",
    "The raw data is from the R package `DuoClustering2018`, which contain a set of datasets with various clustering results and converted to `.h5ad` file using the R package `sceasy`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ad.read_h5ad(\"data/Zhengmix4eq.h5ad\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The top 200 highly variable genes are kept for generating synthetic data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "data.layers[\"log\"] = data.X.copy()\n",
    "sc.pp.normalize_total(data,target_sum=1e4,layer=\"log\")\n",
    "sc.pp.log1p(data,layer=\"log\")\n",
    "# choose HVG genes\n",
    "sc.pp.highly_variable_genes(data,layer=\"log\",n_top_genes=200)\n",
    "data = data[:,data.var[\"highly_variable\"] == True]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We extract out B cells and regulatory T cells only and use all cells from these two cell types to simulate synthetic data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data[(data.obs[\"phenoid\"]==\"b.cells\")|(data.obs[\"phenoid\"]==\"regulatory.t\"),:]\n",
    "data.obs[\"cell_type\"] = data.obs[\"phenoid\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 1802 × 200\n",
       "    obs: 'barcode', 'phenoid', 'total_features', 'log10_total_features', 'total_counts', 'log10_total_counts', 'pct_counts_top_50_features', 'pct_counts_top_100_features', 'pct_counts_top_200_features', 'pct_counts_top_500_features', 'sizeFactor', 'cell_type'\n",
       "    var: 'id', 'symbol', 'mean_counts', 'log10_mean_counts', 'rank_counts', 'n_cells_counts', 'pct_dropout_counts', 'total_counts', 'log10_total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm'\n",
       "    uns: 'log1p', 'hvg'\n",
       "    obsm: 'X_pca', 'X_tsne'\n",
       "    layers: 'logcounts', 'normcounts', 'log'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b.cells6276    b.cells\n",
       "b.cells6144    b.cells\n",
       "b.cells6285    b.cells\n",
       "b.cells8679    b.cells\n",
       "b.cells96      b.cells\n",
       "Name: cell_type, dtype: category\n",
       "Categories (2, object): ['b.cells', 'regulatory.t']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.obs[\"cell_type\"].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Simulation\n",
    "\n",
    "We use the step-by-step functions instead of the one-shot function to generate synthetic data since these step-by-step functions allow us to alter estimated parameters and generate new data based on our desired parameters."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "example = scDesign3Py.scDesign3(n_cores=3,parallelization=\"pbmcmapply\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "example_data = example.construct_data(    \n",
    "    anndata = data,\n",
    "    default_assay_name = \"counts\",\n",
    "    celltype = \"cell_type\",\n",
    "    corr_formula = \"1\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:08\n"
     ]
    }
   ],
   "source": [
    "example.set_r_random_seed(123)\n",
    "example_marginal = example.fit_marginal(\n",
    "    mu_formula = \"cell_type\",\n",
    "    sigma_formula = \"1\",\n",
    "    family_use = \"nb\",\n",
    "    usebam = False\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Convert Residuals to Multivariate Gaussian\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Converting End\n",
      "\n",
      "R[write to console]: Copula group 1 starts\n",
      "\n"
     ]
    }
   ],
   "source": [
    "example.set_r_random_seed(123)\n",
    "example_copula = example.fit_copula()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |                                                              |   0%, ETA NA"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:06\n"
     ]
    }
   ],
   "source": [
    "example_para = example.extract_para()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, we examine the `mean_mat`, which is one of the outputs from the previous function `extract_para()`. For each gene, we calculate the difference in the between the maximum mean parameter and minimum mean parameter across all cells. We select genes which the gene’s mean difference across cells are in the top 50 largest differences. We regard these genes as DE genes. Then, we manually set the mean parameters of the rest genes to be the same across all cells. We regard all genes with the same mean parameter across cells as non-DE genes. Of course, this is a very flexible step and users may choose other ideas to modify the mean matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "diff_idx = (example_para[\"mean_mat\"].max() - example_para[\"mean_mat\"].min()).sort_values(ascending=False).index\n",
    "de_idx = diff_idx[:50]\n",
    "no_de_idx = diff_idx[50:]\n",
    "example_para[\"mean_mat\"][no_de_idx] = ((example_para[\"mean_mat\"].max() + example_para[\"mean_mat\"].min())/2)[no_de_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group 1 starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    }
   ],
   "source": [
    "example.set_r_random_seed(123)\n",
    "example_newcount = example.simu_new(mean_mat=example_para[\"mean_mat\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DE genes identification\n",
    "\n",
    "Then, we follow [Scanpy](https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html#Finding-marker-genes)’s pipeline to preprocess the simulated data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "simu_data = ad.AnnData(example_newcount)\n",
    "simu_data.var[\"mt\"] = simu_data.var_names.str.startswith(\"MT-\")\n",
    "sc.pp.calculate_qc_metrics(\n",
    "    simu_data, qc_vars=[\"mt\"], percent_top=None, log1p=False, inplace=True\n",
    ")\n",
    "simu_data = simu_data[simu_data.obs.n_genes_by_counts < 2500, :]\n",
    "simu_data = simu_data[simu_data.obs.pct_counts_mt < 5, :].copy()\n",
    "sc.pp.normalize_total(simu_data, target_sum=1e4)\n",
    "sc.pp.log1p(simu_data)\n",
    "simu_data.raw = simu_data\n",
    "sc.pp.scale(simu_data, max_value=10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we already have the ground truth cell type annotations for our simulated dataset, we can directly use the cell type annotations we have instead of clustering manually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "simu_data.obs[\"cell_type\"] = data.obs[\"cell_type\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "source": [
    "We follow [Scanpy](https://scanpy-tutorials.readthedocs.io/en/latest/pbmc3k.html#Finding-marker-genes)’s pipeline to conduct DE test.\n",
    "\n",
    "Here, we only benchmark t test and wilcoxon test as an example."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "qvals = pd.DataFrame(index=simu_data.var_names)\n",
    "methods = [\"t-test\",\"wilcoxon\"]\n",
    "for method in methods:\n",
    "    sc.tl.rank_genes_groups(simu_data, \"cell_type\", method=method, use_raw=True)\n",
    "    tmp = pd.DataFrame(simu_data.uns[\"rank_genes_groups\"][\"pvals_adj\"][\"b.cells\"],index=simu_data.uns[\"rank_genes_groups\"][\"names\"][\"b.cells\"],columns=[method])\n",
    "    qvals = pd.concat([qvals,tmp],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we manually created non-DE genes in the `extra_para()` step, now we can calculate the actual false discovery proportion(FDP) and power of the DE tests we conducted above with various target FDR threshold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "targetFDR = np.concatenate([np.arange(0.01,0.11,0.01),np.arange(0.2,0.6,0.1)])\n",
    "fdp = pd.DataFrame(index=targetFDR,columns=methods)\n",
    "power = pd.DataFrame(index=targetFDR,columns=methods)\n",
    "\n",
    "for method in methods:\n",
    "    curr_p = qvals[method]\n",
    "    for threshold in targetFDR:\n",
    "        discovery = curr_p[curr_p <= threshold]\n",
    "        true_positive = discovery.index.intersection(de_idx).shape[0]\n",
    "\n",
    "        if len(discovery) == 0:\n",
    "            fdp.loc[threshold,method] = 0\n",
    "        else:\n",
    "            fdp.loc[threshold,method] = (len(discovery) - true_positive)/len(discovery)\n",
    "        \n",
    "        power.loc[threshold,method] = true_positive/de_idx.shape[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "\n",
    "We visualize the Target FDR vs Actual FDP and Target FDR vs Power below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for method in methods:\n",
    "    plt.plot(targetFDR,fdp[method],\"o-\",label=method)\n",
    "\n",
    "plt.plot(targetFDR, targetFDR, '--', color='gray')\n",
    "plt.xlabel('Target FDR')\n",
    "plt.ylabel('Actual FDP')\n",
    "plt.legend(loc=\"best\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for method in methods:\n",
    "    plt.plot(targetFDR,power[method],\"o-\",label=method)\n",
    "\n",
    "plt.xlabel('Target FDR')\n",
    "plt.ylabel('Power')\n",
    "plt.legend(loc=\"best\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "scrpy",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
