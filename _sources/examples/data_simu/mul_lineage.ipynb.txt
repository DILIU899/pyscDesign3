{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "os.chdir(\"../..\")\n",
    "sys.path.append(\"../../\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simulate datasets with multiple lineages\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this example, we will show how to use pyscDesign3 to simulate the multiple lineages single-cell data.\n",
    "\n",
    "## Import packages and Read in data\n",
    "\n",
    "### import pacakges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import anndata as ad\n",
    "import numpy as np\n",
    "import pyscDesign3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in the reference data\n",
    "\n",
    "The raw data is from the [GEO with ID GSE72859](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE72859), which describes myeloid progenitors from mouse bone marrow. \n",
    "\n",
    "We pre-select the top 1000 highly variable genes. To save time, we only use the top 30 genes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ad.read_h5ad(\"data/MARROW.h5ad\")\n",
    "data = data[:,0:30]\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, this example dataset has two sets of pseudotime, thus two lineages. The variables `pseudotime1` and `pseudotime2` contain the corresponding pseudotime for each cell. The variables `l1` and `l2` indicate whether a particular cell belong to the first and/or second lineages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data.obs[[\"pseudotime1\",\"pseudotime2\",\"l1\",\"l2\"]].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation\n",
    "\n",
    "Then, we can use this multiple-lineage dataset to generate new data by setting the parameter `mu_formula` as two smooth terms for each lineage."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "test = pyscDesign3.scDesign3(n_cores=6)\n",
    "test.set_r_random_seed(123)\n",
    "simu_res = test.scdesign3(\n",
    "    anndata=data,\n",
    "    default_assay_name=\"counts\",\n",
    "    celltype=\"cell_type\",\n",
    "    pseudotime=[\"pseudotime1\", \"pseudotime2\", \"l1\", \"l2\"],\n",
    "    mu_formula=\"s(pseudotime1, k = 10, by = l1, bs = 'cr') + s(pseudotime2, k = 10, by = l2, bs = 'cr')\",\n",
    "    sigma_formula=\"1\",\n",
    "    family_use=\"nb\",\n",
    "    usebam=True,\n",
    "    corr_formula=\"1\",\n",
    "    copula=\"gaussian\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": [
     "hide-output"
    ]
   },
   "source": [
    "Then we can construct new data using the simulated count matrix."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "simu_data = ad.AnnData(X=simu_res[\"new_count\"], obs=simu_res[\"new_covariate\"])\n",
    "simu_data.layers[\"log_transformed\"] = np.log1p(simu_data.X)\n",
    "data.layers[\"log_transformed\"] = np.log1p(data.X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "plot1 = pyscDesign3.plot_reduceddim(\n",
    "    ref_anndata=data,\n",
    "    anndata_list=simu_data,\n",
    "    name_list=[\"Reference\", \"scDesign3\"],\n",
    "    assay_use=\"log_transformed\",\n",
    "    if_plot=True,\n",
    "    color_by=\"pseudotime1\",\n",
    "    n_pc=20,\n",
    "    point_size=5,\n",
    ")\n",
    "plot2 = pyscDesign3.plot_reduceddim(\n",
    "    ref_anndata=data,\n",
    "    anndata_list=simu_data,\n",
    "    name_list=[\"Reference\", \"scDesign3\"],\n",
    "    assay_use=\"log_transformed\",\n",
    "    if_plot=True,\n",
    "    color_by=\"pseudotime2\",\n",
    "    n_pc=20,\n",
    "    point_size=5,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pseudotime1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot1[\"p_umap\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pseudotime2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot2[\"p_umap\"]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pyscdesign",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
