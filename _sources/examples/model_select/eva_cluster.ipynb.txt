{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "os.chdir(\"../..\")\n",
    "sys.path.append(\"../../\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluate clustering goodness-of-fit\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this example, we will show how to use pyscDesign3 to evaluate the clustering goodness-of-fit for different cell-type assignments. If the true labels are unavailable and we have little prior knowledge, the pyscDesign3 BIC can serve as an unsupervised metric.\n",
    "\n",
    "## Step 1: Import packages and Read in data\n",
    "\n",
    "### import pacakges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import anndata as ad\n",
    "import pandas as pd\n",
    "import scanpy as sc\n",
    "import pyscDesign3\n",
    "\n",
    "from sklearn.metrics import adjusted_rand_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in data\n",
    "\n",
    "The raw data is from the R package `DuoClustering2018` and converted to `.h5ad` file using the R package `sceasy`.\n",
    "\n",
    "The cluster result is also got from the R package `DuoClustering2018` as the package has already provided various clustering results."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ad.read_h5ad(\"data/Zhengmix4eq.h5ad\")\n",
    "cluster_res = pd.read_csv(\"data/clusterres_Zhengmix4eq.csv\",index_col=0)\n",
    "cluster_res = cluster_res[cluster_res[\"method\"].isin([\"PCAKmeans\"]) & (cluster_res[\"run\"] == 1)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For demonstration purpose, we use the `Zhengmix4eq` dataset in the package with top 30 highly variable genes and the corresponding k-means clustering results with $k = 2,5,7,10$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "kmeans_res = cluster_res.groupby(\"k\")\n",
    "kmeans_res = {k: v for k,v in kmeans_res if k in [2,5,7,10]}\n",
    "ncell = data.n_obs\n",
    "ngene = 30\n",
    "ntrain = int(ncell/5)\n",
    "\n",
    "# choose HVG genes\n",
    "data.layers[\"log\"] = data.X.copy()\n",
    "sc.pp.normalize_total(data,target_sum=1e4,layer=\"log\")\n",
    "sc.pp.log1p(data,layer=\"log\")\n",
    "sc.pp.highly_variable_genes(data,layer=\"log\",n_top_genes=ngene)\n",
    "data = data[:,data.var[\"highly_variable\"] == True]\n",
    "\n",
    "train_data = data[data.obs.sample(n=ntrain,random_state=123).index,:]\n",
    "train_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation\n",
    "\n",
    "We then use different cell-type clustering information to simulate new data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "simu_res = {}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "for key,value in kmeans_res.items():\n",
    "    tmp = value[[\"cell\",\"cluster\"]]\n",
    "    tmp.index = tmp[\"cell\"]\n",
    "    train_data.obs[\"cell_type\"] = tmp.loc[train_data.obs.index,\"cluster\"].tolist()\n",
    "    train_data.obs[\"cell_type\"] = train_data.obs[\"cell_type\"].astype(\"int\").astype(\"str\").astype(\"category\")\n",
    "\n",
    "    test = pyscDesign3.scDesign3(n_cores=6)\n",
    "    test.set_r_random_seed(123)\n",
    "    res = test.scdesign3(anndata=train_data, \n",
    "                        celltype = 'cell_type',\n",
    "                        corr_formula = \"1\", \n",
    "                        mu_formula = \"cell_type\", \n",
    "                        sigma_formula = \"cell_type\", \n",
    "                        copula = \"gaussian\", \n",
    "                        default_assay_name = \"counts\", \n",
    "                        family_use = \"nb\",\n",
    "                        usebam = True)\n",
    "\n",
    "    simu_res[key] = res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "\n",
    "After the simulations, we can check the BIC and the calculated ARI to evaluate k-means clustering qualities."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bics = pd.Series([v[\"model_bic\"][\"bic.marginal\"] for v in simu_res.values()])\n",
    "ari = pd.Series([adjusted_rand_score(v[\"cluster\"],v[\"trueclass\"]) for v in kmeans_res.values()])\n",
    "spearman_corr = bics.corr(ari,method=\"spearman\")\n",
    "\n",
    "# plot\n",
    "plt.scatter(x=ari,y=bics)\n",
    "plt.xlabel('ARI')\n",
    "plt.ylabel('scDesign3 BIC')\n",
    "plt.text(x=0.25,y=25500,s=\"Spearman Correlation: %.2f\" % spearman_corr)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![res](out.png)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
