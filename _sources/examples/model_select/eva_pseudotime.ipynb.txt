{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import warnings\n",
    "\n",
    "os.chdir(\"../..\")\n",
    "sys.path.append(\"../../\")\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Evaluate pseudotime goodness-of-fit\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this example, we will show how to use scDesign3Py to evaluate the pseudotime goodness-of-fit for different pseudotime labels. If the true labels are unavailable and we have little prior knowledge, the scDesign3 BIC can serve as an unsupervised metric. In this tutorial, we will first use the ground truth \"pseudotime\" generated by the R package [dyngen](https://dyngen.dynverse.org/). Then, we will perturb the ground truth pseudotime to worsen its quality and use scDesign3’s BIC to examine pseudotime goodness-of-fit.\n",
    "\n",
    "## Import packages and Read in data\n",
    "\n",
    "### import pacakges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R project used is located at /home/ld/mambaforge/envs/cell2loc/lib/R\n"
     ]
    }
   ],
   "source": [
    "import anndata as ad\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scDesign3Py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in data\n",
    "\n",
    "The raw data is from the R package `dyngen`. Here, we directly use the result from the [scDesign3 tutorial](https://songdongyuan1994.github.io/scDesign3/docs/articles/scDesign3-pseudotimeGOF-vignette.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ad.read_h5ad(\"data/dyngen.h5ad\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AnnData object with n_obs × n_vars = 500 × 155\n",
       "    obs: 'step_ix', 'simulation_i', 'sim_time', 'pseudotime'\n",
       "    var: 'module_id', 'basal', 'burn', 'independence', 'color', 'is_tf', 'is_hk', 'transcription_rate', 'splicing_rate', 'translation_rate', 'mrna_halflife', 'protein_halflife', 'mrna_decay_rate', 'protein_decay_rate', 'max_premrna', 'max_mrna', 'max_protein', 'mol_premrna', 'mol_mrna', 'mol_protein'\n",
       "    uns: 'traj_dimred_segments', 'traj_milestone_network', 'traj_progressions'\n",
       "    obsm: 'dimred'\n",
       "    layers: 'counts_protein', 'counts_spliced', 'counts_unspliced', 'logcounts'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simulation\n",
    "\n",
    "We perturb the pseudotime by generating random numbers from uniform distribution and replacing various percentages of the original pseudotime with random numbers. The percentage ranges from 0% to 100%. In the code below, we generate 11 sets of perturbed pseudotime with the percentage of perturbation ranging from 0% to 100%. For each new set of perturbed pseudotime, we create a new `AnnData` object, storing the original count matrix and the corresponding perturbed pseudotime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "perturb_data_dict = {0:{\"dat\":data}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in range(1,11):\n",
    "    tmp_data = data.copy()\n",
    "    num = round(i/10 * len(tmp_data))\n",
    "    np.random.seed(i)\n",
    "    tmp_data.obs.loc[tmp_data.obs.sample(n=num,random_state=i).index,\"pseudotime\"] = np.random.uniform(size=num)\n",
    "    perturb_data_dict[i] = {\"dat\":tmp_data}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we run scDesign3Py to get the model bic."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:02\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:02\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:02\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:07\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:04\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:01\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:07\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:02\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:07\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:02\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n",
      "R[write to console]: Input Data Construction Start\n",
      "\n",
      "R[write to console]: Input Data Construction End\n",
      "\n",
      "R[write to console]: Start Marginal Fitting\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:05\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Marginal Fitting End\n",
      "\n",
      "R[write to console]: Start Copula Fitting\n",
      "\n",
      "R[write to console]: Copula Fitting End\n",
      "\n",
      "R[write to console]: Start Parameter Extraction\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:03\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: Parameter\n",
      "Extraction End\n",
      "\n",
      "R[write to console]: Start Generate New Data\n",
      "\n",
      "R[write to console]: Use Copula to sample a multivariate quantile matrix\n",
      "\n",
      "R[write to console]: Sample Copula group ind starts\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  |=======================================================| 100%, Elapsed 00:00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "R[write to console]: New Data Generating End\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for key, value in perturb_data_dict.items():\n",
    "    tmp_data = value[\"dat\"]\n",
    "    \n",
    "    test = scDesign3Py.scDesign3(n_cores=2, parallelization=\"pbmcmapply\")\n",
    "    test.set_r_random_seed(123)\n",
    "    res = test.scdesign3(anndata=tmp_data, \n",
    "                        pseudotime=\"pseudotime\",\n",
    "                        corr_formula = \"ind\", \n",
    "                        mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\", \n",
    "                        sigma_formula = \"1\", \n",
    "                        copula = \"gaussian\", \n",
    "                        default_assay_name = \"counts\", \n",
    "                        family_use = \"nb\",\n",
    "                        usebam = False)\n",
    "    \n",
    "    perturb_data_dict[key][\"bic\"] = res[\"model_bic\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualization\n",
    "\n",
    "After the simulations, we use BIC, which is an unsupervised metric, for evaluating the goodness-of-fit of the pseudotime."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bic.marginal</th>\n",
       "      <th>bic.copula</th>\n",
       "      <th>bic.total</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.0 perturb</th>\n",
       "      <td>440744.638950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>440744.638950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.1 perturb</th>\n",
       "      <td>465098.582392</td>\n",
       "      <td>0.0</td>\n",
       "      <td>465098.582392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.2 perturb</th>\n",
       "      <td>471527.503356</td>\n",
       "      <td>0.0</td>\n",
       "      <td>471527.503356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.3 perturb</th>\n",
       "      <td>487017.888671</td>\n",
       "      <td>0.0</td>\n",
       "      <td>487017.888671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.4 perturb</th>\n",
       "      <td>487621.784061</td>\n",
       "      <td>0.0</td>\n",
       "      <td>487621.784061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.5 perturb</th>\n",
       "      <td>493888.709002</td>\n",
       "      <td>0.0</td>\n",
       "      <td>493888.709002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.6 perturb</th>\n",
       "      <td>496339.699622</td>\n",
       "      <td>0.0</td>\n",
       "      <td>496339.699622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.7 perturb</th>\n",
       "      <td>499465.894561</td>\n",
       "      <td>0.0</td>\n",
       "      <td>499465.894561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.8 perturb</th>\n",
       "      <td>499858.520011</td>\n",
       "      <td>0.0</td>\n",
       "      <td>499858.520011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.9 perturb</th>\n",
       "      <td>501529.672888</td>\n",
       "      <td>0.0</td>\n",
       "      <td>501529.672888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.0 perturb</th>\n",
       "      <td>502280.653546</td>\n",
       "      <td>0.0</td>\n",
       "      <td>502280.653546</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              bic.marginal  bic.copula      bic.total\n",
       "0.0 perturb  440744.638950         0.0  440744.638950\n",
       "0.1 perturb  465098.582392         0.0  465098.582392\n",
       "0.2 perturb  471527.503356         0.0  471527.503356\n",
       "0.3 perturb  487017.888671         0.0  487017.888671\n",
       "0.4 perturb  487621.784061         0.0  487621.784061\n",
       "0.5 perturb  493888.709002         0.0  493888.709002\n",
       "0.6 perturb  496339.699622         0.0  496339.699622\n",
       "0.7 perturb  499465.894561         0.0  499465.894561\n",
       "0.8 perturb  499858.520011         0.0  499858.520011\n",
       "0.9 perturb  501529.672888         0.0  501529.672888\n",
       "1.0 perturb  502280.653546         0.0  502280.653546"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bic_res = pd.concat([i[\"bic\"] for _,i in perturb_data_dict.items()],axis=1).T\n",
    "bic_res.index = [f\"{i/10} perturb\" for i in bic_res.index]\n",
    "bic_res"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we also have the ground truth pseudotime, we also calculate the $r^2$ between the ground truth pseudotime and perturbed pseudotime. The $r^2$ is a supervised metric to evaluate the pseudotime qualities. The figure shows that model BICs agree with $r^2$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = []\n",
    "for i in range(0,11):\n",
    "    r.append(perturb_data_dict[i][\"dat\"].obs[\"pseudotime\"].corr(perturb_data_dict[0][\"dat\"].obs[\"pseudotime\"],\"pearson\"))\n",
    "r2 = [i*i for i in r]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "compare = pd.DataFrame({\"bic\":bic_res[\"bic.marginal\"],\"r2\":r2})\n",
    "spearman_corr = compare.corr(method=\"spearman\").iloc[0,1]\n",
    "\n",
    "# plot\n",
    "plt.scatter(x=r2,y=bic_res[\"bic.marginal\"])\n",
    "plt.xlabel('R2 (truth vs pseudotime)')\n",
    "plt.ylabel('scDesign3 BIC')\n",
    "plt.text(x=0.05,y=450000,s=\"Spearman Correlation: %.2f\" % spearman_corr)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
