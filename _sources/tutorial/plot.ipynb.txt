{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "\n",
    "os.chdir(\"..\")\n",
    "sys.path.append(\"../../\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Plot for visualization\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this section, we will show how to use function `plot_reduceddim()` to realize dimension reduction and automatically plot the result.\n",
    "\n",
    "To get detailed information of the input and output of the function, please check [API](../set_up/_autosummary/pyscDesign3.plot_reduceddim.rst).\n",
    "\n",
    "## Step 1: Import packages and Read in data\n",
    "\n",
    "### import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import anndata as ad\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pyscDesign3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Read in data\n",
    "\n",
    "The raw data is from the [scvelo](https://scvelo.readthedocs.io/scvelo.datasets.pancreas/) and we only choose top 30 genes to save time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = ad.read_h5ad(\"data/PANCREAS.h5ad\")\n",
    "data = data[:, 0:30]\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Use `scDesign3` class to simulate reads for comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "# create the instance and set the parallel method\n",
    "test = pyscDesign3.scDesign3(n_cores=6, parallelization=\"mcmapply\", return_py=True)\n",
    "test.set_r_random_seed(123)\n",
    "\n",
    "# all-in-one simulation\n",
    "simu_res = test.scdesign3(\n",
    "    anndata=data,\n",
    "    default_assay_name=\"counts\",\n",
    "    celltype=\"cell_type\",\n",
    "    pseudotime=\"pseudotime\",\n",
    "    mu_formula=\"s(pseudotime, k = 10, bs = 'cr')\",\n",
    "    sigma_formula=\"s(pseudotime, k = 5, bs = 'cr')\",\n",
    "    family_use=\"nb\",\n",
    "    usebam=True,\n",
    "    corr_formula=\"1\",\n",
    "    copula=\"gaussian\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Use the simulated counts to construct the new `anndata.AnnData` object\n",
    "\n",
    "Besides constructing the simulated `anndata.AnnData` object, we can also calculate the log transformed data for visualization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "simu_data = ad.AnnData(X=simu_res[\"new_count\"], obs=simu_res[\"new_covariate\"])\n",
    "simu_data.layers[\"log_transformed\"] = np.log1p(simu_data.X)\n",
    "data.layers[\"log_transformed\"] = np.log1p(data.X)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Visualization\n",
    "\n",
    "Please make sure all `anndata.AnnData` objects provided in `ref_anndata` and `anndata_list` has similar assay name structure.\n",
    "\n",
    "For example, all involved count matrix should all be stored either in `anndata.AnnData.X` or `anndata.AnnData.layers[assay_use]` and all share the same name."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "plot = pyscDesign3.plot_reduceddim(\n",
    "    ref_anndata=data,\n",
    "    anndata_list=simu_data,\n",
    "    name_list=[\"Reference\", \"scDesign3\"],\n",
    "    assay_use=\"log_transformed\",\n",
    "    if_plot=True,\n",
    "    color_by=\"pseudotime\",\n",
    "    n_pc=20,\n",
    "    point_size=5,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you set `if_plot` = True, then the return result is a `dict` with two keys: **p_umap** and **p_pca**. Each key hosts a plot plotted by `matplotlib`.\n",
    "\n",
    "UMAP plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot[\"p_umap\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "PCA plot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plot[\"p_pca\"]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Alternative to plot\n",
    "\n",
    "If you are not satisfied with the automatically generated plot result, you can set `if_plot` = False. Then you will get the dimension reduction result and customize your manipulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [],
   "source": [
    "res = pyscDesign3.plot_reduceddim(\n",
    "    ref_anndata=data,\n",
    "    anndata_list=simu_data,\n",
    "    name_list=[\"Reference\", \"scDesign3\"],\n",
    "    assay_use=\"log_transformed\",\n",
    "    if_plot=False,\n",
    "    color_by=\"pseudotime\",\n",
    "    n_pc=20,\n",
    "    point_size=5,\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Each row of the output represents a cell (observation). The return PCs number is equal to the set in `n_pc`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "res[[\"Method\",\"pseudotime\",\"PC1\",\"PC2\",\"UMAP1\",\"UMAP2\"]].head()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "scrpy",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
