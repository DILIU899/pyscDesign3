{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "tags": [
     "remove-cell"
    ]
   },
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "import warnings\n",
    "\n",
    "os.chdir(\"..\")\n",
    "sys.path.append(\"../../\")\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Get the bpparam for `bpmapply`\n",
    "\n",
    "## Introduction\n",
    "\n",
    "In this section, we will show how to use `get_bpparam()` function to get a **R** `BiocParallel::MulticoreParam` or `BiocParallel::SnowParam` object to combine with @parallelization = `bpmapply`.\n",
    "\n",
    "To get detailed information of the input and output of the function, please check [API](../set_up/_autosummary/scDesign3Py.get_bpparam.rst).\n",
    "\n",
    "To get more information on `BiocParallel` **R** package to help you set the parameters, please check the [document](https://www.bioconductor.org/packages/devel/bioc/manuals/BiocParallel/man/BiocParallel.pdf).\n",
    "\n",
    "## Step 1: Import packages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The R project used is located at /home/ld/anaconda3/envs/pyscdesign/lib/R\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "import anndata as ad\n",
    "import scDesign3Py"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Call `get_bpparam` function\n",
    "\n",
    "- For Linux/Mac users:\n",
    "\n",
    "The possible parallel method include `mcmapply`, `pbmcmapply` and `bpmapply`. If you are using the `bpmapply` method, then you should run this function and you can choose either `MulticoreParam` or `SnowParam` mode.\n",
    "\n",
    "- For windows users:\n",
    "\n",
    "The only choice is to choose `bpmapply` method and run this function with `SnowParam` mode. **Setting more than 1 core is not allowed in other methods.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "class: MulticoreParam\n",
      "  bpisup: FALSE; bpnworkers: 4; bptasks: 0; bpjobname: BPJOB\n",
      "  bplog: FALSE; bpthreshold: INFO; bpstopOnError: FALSE\n",
      "  bpRNGseed: ; bptimeout: NA; bpprogressbar: FALSE\n",
      "  bpexportglobals: TRUE; bpexportvariables: FALSE; bpforceGC: FALSE\n",
      "  bpfallback: TRUE\n",
      "  bplogdir: NA\n",
      "  bpresultdir: NA\n",
      "  cluster type: FORK\n",
      "\n"
     ]
    }
   ],
   "source": [
    "bpparam = scDesign3Py.get_bpparam(mode=\"MulticoreParam\", show=True, stop_on_error=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Read in data and Run the scDesign3 methods\n",
    "\n",
    "The raw data is from the [scvelo](https://scvelo.readthedocs.io/scvelo.datasets.pancreas/) and we only choose top 30 genes to save time."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "View of AnnData object with n_obs × n_vars = 2087 × 30\n",
       "    obs: 'clusters_coarse', 'clusters', 'S_score', 'G2M_score', 'cell_type', 'sizeFactor', 'pseudotime'\n",
       "    var: 'highly_variable_genes'\n",
       "    obsm: 'X_pca', 'X_umap', 'X_x_pca', 'X_x_umap'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = ad.read_h5ad(\"data/PANCREAS.h5ad\")\n",
    "data = data[:, 0:30]\n",
    "data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we simply show the differnece when fitting the marginal models using the `SnowParam` mode."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "tags": [
     "remove-output"
    ]
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <span>ListVector with 4 elements.</span>\n",
       "        <table>\n",
       "        <tbody>\n",
       "        \n",
       "          <tr>\n",
       "            <th>\n",
       "            count_mat\n",
       "            </th>\n",
       "            <td>\n",
       "            <rpy2.rinterface.FloatSexpVector object at 0x7fb60e769510> [14]\n",
       "            </td>\n",
       "          </tr>\n",
       "        \n",
       "          <tr>\n",
       "            <th>\n",
       "            dat\n",
       "            </th>\n",
       "            <td>\n",
       "            <rpy2.rinterface.ListSexpVector object at 0x7fb60eb89c90> [19]\n",
       "            </td>\n",
       "          </tr>\n",
       "        \n",
       "          <tr>\n",
       "            <th>\n",
       "            newCovariate\n",
       "            </th>\n",
       "            <td>\n",
       "            <rpy2.rinterface.ListSexpVector object at 0x7fb60e74d750> [19]\n",
       "            </td>\n",
       "          </tr>\n",
       "        \n",
       "          <tr>\n",
       "            <th>\n",
       "            filtered_gene\n",
       "            </th>\n",
       "            <td>\n",
       "            <rpy2.rinterface_lib.sexp.NULLType object at 0x7fb6eec841d0> [0]\n",
       "            </td>\n",
       "          </tr>\n",
       "        \n",
       "        </tbody>\n",
       "        </table>\n",
       "        "
      ],
      "text/plain": [
       "<rpy2.robjects.vectors.ListVector object at 0x7fb60e73b2d0> [19]\n",
       "R classes: ('list',)\n",
       "[FloatSexpV..., ListSexpVe..., ListSexpVe..., NULLType]\n",
       "  count_mat: <class 'rpy2.rinterface.FloatSexpVector'>\n",
       "  <rpy2.rinterface.FloatSexpVector object at 0x7fb60e7b5fd0> [14]\n",
       "  dat: <class 'rpy2.rinterface.ListSexpVector'>\n",
       "  <rpy2.rinterface.ListSexpVector object at 0x7fb60e7c3e90> [19]\n",
       "  newCovariate: <class 'rpy2.rinterface.ListSexpVector'>\n",
       "  <rpy2.rinterface.ListSexpVector object at 0x7fb60e7c2510> [19]\n",
       "  filtered_gene: <class 'rpy2.rinterface_lib.sexp.NULLType'>\n",
       "  <rpy2.rinterface_lib.sexp.NULLType object at 0x7fb6eec841d0> [0]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# create the instance\n",
    "test1 = scDesign3Py.scDesign3(n_cores=1, parallelization=\"bpmapply\", bpparam=bpparam, return_py=False)\n",
    "test2 = scDesign3Py.scDesign3(n_cores=3, parallelization=\"bpmapply\", bpparam=bpparam, return_py=False)\n",
    "\n",
    "# construct data\n",
    "test1.construct_data(\n",
    "    anndata=data,\n",
    "    default_assay_name=\"counts\",\n",
    "    celltype=\"cell_type\",\n",
    "    pseudotime=\"pseudotime\",\n",
    "    corr_formula=\"1\",\n",
    ")\n",
    "test2.construct_data(\n",
    "    anndata=data,\n",
    "    default_assay_name=\"counts\",\n",
    "    celltype=\"cell_type\",\n",
    "    pseudotime=\"pseudotime\",\n",
    "    corr_formula=\"1\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit marginal using 1 core"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total time cost when using 1 core is 283.27 sec\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "test1.fit_marginal(\n",
    "    mu_formula=\"s(pseudotime, k = 10, bs = 'cr')\",\n",
    "    sigma_formula=\"s(pseudotime, k = 5, bs = 'cr')\",\n",
    "    family_use=\"nb\",\n",
    "    usebam=False,\n",
    ")\n",
    "end = time.time()\n",
    "print(\"Total time cost when using 1 core is {:.2f} sec\".format(end-start))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Fit marginal using 3 cores"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total time cost when using 3 cores is 125.00 sec\n"
     ]
    }
   ],
   "source": [
    "start = time.time()\n",
    "test2.fit_marginal(\n",
    "    mu_formula=\"s(pseudotime, k = 10, bs = 'cr')\",\n",
    "    sigma_formula=\"s(pseudotime, k = 5, bs = 'cr')\",\n",
    "    family_use=\"nb\",\n",
    "    usebam=False,\n",
    ")\n",
    "end = time.time()\n",
    "print(\"Total time cost when using 3 cores is {:.2f} sec\".format(end-start))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "scrpy",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
